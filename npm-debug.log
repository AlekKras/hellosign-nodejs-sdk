0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.5.1
3 info using node@v0.12.0
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: '/Users/derek/Documents/sdks/hellosign-nodejs-sdk',
8 silly cache add   type: 'directory' }
9 verbose addLocalDirectory /Users/derek/.npm/hellosign-sdk/1.1.6/package.tgz not in flight; packing
10 verbose tar pack [ '/Users/derek/.npm/hellosign-sdk/1.1.6/package.tgz',
10 verbose tar pack   '/Users/derek/Documents/sdks/hellosign-nodejs-sdk' ]
11 verbose tarball /Users/derek/.npm/hellosign-sdk/1.1.6/package.tgz
12 verbose folder /Users/derek/Documents/sdks/hellosign-nodejs-sdk
13 info prepublish hellosign-sdk@1.1.6
14 verbose addLocalTarball adding from inside cache /Users/derek/.npm/hellosign-sdk/1.1.6/package.tgz
15 silly cache afterAdd hellosign-sdk@1.1.6
16 verbose afterAdd /Users/derek/.npm/hellosign-sdk/1.1.6/package/package.json not in flight; writing
17 verbose afterAdd /Users/derek/.npm/hellosign-sdk/1.1.6/package/package.json written
18 silly publish { name: 'hellosign-sdk',
18 silly publish   version: '1.1.6',
18 silly publish   description: 'HelloSign NodeJS SDK',
18 silly publish   homepage: 'https://github.com/HelloFax/hellosign-nodejs-sdk',
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'https://github.com/HelloFax/hellosign-nodejs-sdk' },
18 silly publish   'bugs:': 'apisupport@hellosign.com',
18 silly publish   engines: { node: '>= v0.8.0' },
18 silly publish   main: 'lib/hellosign.js',
18 silly publish   dependencies: { 'form-data': '~0.1.4', request: '^2.55.0', when: '~3.1.0' },
18 silly publish   scripts: { test: 'mocha test/unit' },
18 silly publish   devDependencies: { 'expect.js': '^0.3.1', mocha: '^2.2.3', sinon: '^1.14.1' },
18 silly publish   readme: 'Hellosign NodeJS SDK [![Build Status](https://travis-ci.org/HelloFax/hellosign-nodejs-sdk.svg?branch=v3)](https://travis-ci.org/HelloFax/hellosign-nodejs-sdk)\n-------------------\n\n\nA NodeJS / JavaScript wrapper for the [HelloSign API](http://www.hellosign.com/api)\n\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Usage](#usage)\n- [Modules](#modules)\n- [Tests](#tests)\n- [Additional Notes](#additional-notes)\n\n\n## Installation\n\nInstall from npm:\n````sh\nnpm install hellosign-sdk\n# Optionally, to install testing / development dependencies\ncd node_modules/hellosign-sdk\nnpm install\n````\n\nInstall from code:\n````sh\ngit clone https://github.com/HelloFax/hellosign-nodejs-sdk.git\ncd hellosign-nodejs-sdk\n# install dependencies\nnpm install\n````\n\n## Configuration\n\nIn your Node application, require `hellosign-sdk` (or the path to the sdk folder if not using npm) and pass authentication information to initialize it:\n\n````javascript\n// Initialize using api key\nvar hellosign = require(\'hellosign-sdk\')({key: \'YOUR API KEY HERE\'});\n\nOR\n\n// Initialize using email and password\nvar hellosign = require(\'hellosign-sdk\')({username: \'your_email_address\', password: \'your_password\'});\n\nOR\n\n// Initialize for embedded requests using your api key, client id, and (optionally, for OAuth) client secret\nvar hellosign = require(\'hellosign-sdk\')({key: \'YOUR API KEY HERE\', client_id: \'your client id\', client_secret: \'your client secret\'});\n\n````\n\nFor initialization for Oauth app-specific calls, see the [Oauth section below](#oauth).\n\n## Usage\n\nEach function in the SDK is called from your initialized hellosign object, followed by the module name, and then the method.\n\n```javascript\n    hellosign.template.list();\n```\n\nSee [below](#modules) for a list of modules and their associated endpoint methods.\n\n### Return values\n\nThe results of each method can be accessed either as a callback, or a promise:\n\nCallback style responses are included as the last (or only, in the case of no others) parameter in a call:\n\n```javascript\nhellosign.signatureRequest.send({/*options*/}, function(err, response){\n    if (err) {\n        //do something with error\n    } else {\n        //parse response\n    }\n});\n```\n\nPromise style access is through the [when](https://github.com/cujojs/when) library:\n\n```javascript\nhellosign.signatureRequest.send({/*options*/})\n    .then(function(response){\n        //parse response\n    })\n    .catch(function(err){\n        //do something with error\n    })\n    .finally(function(){\n        //optionally do yet another thing\n    });\n```\n\nReturned promises are then-able, or can be returned for later resolution.\n\n\n## Modules\n\nModules in the SDK are as follows:\n\n- [Account](#account)\n- [Signature Request](#signature-request)\n- [Embedded](#embedded)\n- [OAuth](#oauth)\n- [Team](#team)\n- [Template](#template)\n- [Unclaimed Draft](#unclaimed-draft)\n\n### Account\n\n#### Get current account information\n\n````javascript\nhellosign.account.get()\n    .then();\n````\n\n#### Update your account information\n\n````javascript\nvar new_callback_url = "https://www.example.com/callback"\nhellosign.account.update({callback_url: new_callback_url})\n    .then();\n````\n\n#### Create a new HelloSign account\n\n````javascript\nvar email: "new_user@example.com";\n\nhellosign.account.create({\n    email_address: email\n})\n.then();\n````\n\n#### Verify if an account exists (only for paid API users)\n\n````javascript\nvar email: "possibly_existing_user@example.com";\nvar account_id: \'12738igfe87egqo22\';\n\nhellosign.account.verify({email_address: email,})\n.then();\n\nhellosign.account.verify({account_id: email,})\n.then();\n````\n\n### Signature Request\n\n\n#### Get an existing Signature Request by ID\n\n````javascript\nhellosign.signatureRequest.get("fa5c8a0b0f492d768749333ad6fcc214c111e967")\n.then();\n````\n\n#### Get a list of your Signature Requests\n\n````javascript\nhellosign.signatureRequest.list()\n  .then(function(res){\n    console.log(res.signature_requests);\n  });\n````\n\nThis endpoint can optionally receive the parameters `page`, and `page_size`, passed in as an options object:\n\n````javascript\nhellosign.signatureRequest.list({page: 2, page_size: 15})\n````\n\n#### Send a Signature Request\n\n````javascript\nvar options = {\n    test_mode : 1,\n    title : \'NDA with Acme Co.\',\n    subject : \'The NDA we talked about\',\n    message : \'Please sign this NDA and then we can discuss more. Let me know if you have any questions.\',\n    signers : [\n          {\n            email_address : \'jack@example.com\',\n            name : \'Jack\',\n            order : 0,\n          },\n          {\n            email_address : \'jill@example.com\',\n            name : \'Jill\',\n            order : 1,\n          }\n        ],\n    cc_email_addresses : [\'lawyer@example.com\', \'lawyer2@example.com\'],\n    files : [\'my/docs/nda.pdf\'],\n    metadata : {\n                  clientId : \'1234\',\n                  custom_text : \'NDA #9\'\n        }\n};\n\nhellosign.signatureRequest.send(options)\n      .then(function(res){\n        console.log(res.signature_request);\n      });\n````\n\n#### Send a Signature Request with Template\n\n````javascript\nvar options = {\n   test_mode : 1,\n   template_id : \'7b63c2131099ef7effeb0e980e2c42005fe3405d\',\n   subject : \'Purchase Order\',\n   message : \'Glad we could come to an agreement.\',\n   signers : [\n     {\n       email_address : \'george@example.com\',\n       name : \'George\',\n       role : \'Signer\'\n     }\n   ]\n};\n\nhellosign.signatureRequest.sendWithTemplate(options)\n  .then(function(res){\n    console.log(res.signature_request);\n  });\n````\n\n#### Send a reminder about an outstanding signature request\n````javascript\nvar request_id = \'fa5c8a0b0f492d768749333ad6fcc214c111e967\'\nvar email = \'thedude@abides.com\'\nhellosign.signatureRequest.remind(request_id,{email_address : email})\n    .then(function(res){\n        console.log(res.signature_request);\n    });\n````\n\n#### Download files from a signature request\n````javascript\nvar request_id = \'fa5c8a0b0f492d768749333ad6fcc214c111e967\'\nhellosign.signatureRequest.download(request_id, {file_type: \'zip\'}, function(err, response) {\n    var file = fs.createWriteStream("files.zip");\n    response.pipe(file);\n    file.on(\'finish\', function() {\n      file.close();\n    });\n});\n````\n\n#### Cancel an outstanding signature request\n````javascript\nvar request_id = \'fa5c8a0b0f492d768749333ad6fcc214c111e967\';\nhellosign.signatureRequest.cancel(request_id)\n.then(function(response){\n  console.log(response.statusCode);\n  console.log(response.statusMessage);\n})\n.catch(function(err){\n  // Handle errors\n});\n````\nSee below for more info on the statusCode / statusMessage properties.\n\n#### Send an embedded signature request\n````javascript\nvar options = {\n  test_mode : 1,\n  clientId : \'0836272d66a1b53f9822f3aa07aef704\',\n  title : \'NDA with Acme Co.\',\n  subject : \'The NDA we talked about\',\n  message : \'Please sign this NDA and then we can discuss more. Let me know if you have any questions.\',\n  signers : [\n    {\n      email_address : \'jack@example.com\',\n      name : \'Jack\',\n      order : 0,\n    },{\n      email_address : \'jill@example.com\',\n      name : \'Jill\',\n      order : 1,\n    }\n  ],\n  cc_email_addresses : [\'lawyer@example.com\', \'lawyer@example2.com\'],\n  files : [\'my/files/nda.pdf\']\n};\n\nhellosign.signatureRequest.createEmbedded(options)\n  .then(function(res){\n    console.log(res.signature_request);\n  });\n\n````\n\n#### Send an embedded signature request with a template\n````javascript\nvar options = {\n   test_mode : 1,\n   clientId : \'0836272d66a1b53f9822f3aa07aef704\',\n   template_id : \'7b63c2131099ef7effeb0e980e2c42005fe3405d\',\n   subject : \'Purchase Order\',\n   message : \'Glad we could come to an agreement.\',\n   signers : [\n     {\n       email_address : \'george@example.com\',\n       name : \'George\',\n       role : \'Signer\'\n     }\n   ]\n};\n\nhellosign.signatureRequest.createEmbeddedWithTemplate(options);\n  .then(function(res){\n    console.log(res.signature_request);\n  });\n````\n\n### Embedded\n\n#### Get an embedded sign URL\n````javascript\nvar signature_id = \'fa5c8a0b0f492d768749333ad6fcc214c111e967\';\nhellosign.embedded.getSignUrl(signature_id)\n    .then();\n````\n\n#### Get an embedded template\'s edit URL\n````javascript\nvar template_id = \'7b63c2131099ef7effeb0e980e2c42005fe3405d\';\nhellosign.embedded.getEditUrl(template_id)\n    .then();\n````\n\n### OAuth\n\n#### Get the user to authorize your app\n\nYou\'ll need to create an API app, and add OAuth support, and then use the URL provided to authorize users for your application.\nWhen you do so, you\'ll get a state and code value that can be used as below to get an OAuth access token.\n\nSee our [OAuth 2.0 walkthrough](https://www.hellosign.com/api/oauthWalkthrough) for more details.\n\n#### Get an app-specific access token\n````javascript\nvar hellosign = require(\'./hellosign.js\')({key: \'YOUR API KEY HERE\', client_id: \'your client id\', client_secret: \'your client secret\'});\n\nhellosign.oauth.getToken({state : \'53b02619\', code : \'1d0219ea3363aa67\'})\n    .then();\n````\n\n#### Make API calls using your OAuth token:\n\nUse the access token to instantiate an app-specific HelloSign object:\n\n````javascript\nvar hellosignOauth = require(\'./hellosign-nodejs-sdk/lib/hellosign.js\')({oauthToken: \'YOUR_ACCESS_TOKEN\'});\n````\n\nYou can then use the HelloSign object you\'ve created with the Oauth key to perform requests with that key:\n\n````javascript\nvar options = {\n    test_mode : 1,\n    title : \'NDA with Acme Co.\',\n    subject : \'The NDA we talked about\',\n    message : \'Please sign this NDA and then we can discuss more. Let me know if you have any questions.\',\n    signers : [\n        {\n            email_address : \'jack@example.com\',\n            name : \'Jack\',\n            order : 0\n        },\n        {\n            email_address : \'jill@example.com\',\n            name : \'Jill\',\n            order : 1\n        }\n    ],\n    cc_email_addresses : [\'lawyer@example.com\', \'lawyer@example2.com\'],\n    files : [\'nda.pdf\']\n};\n\nhellosignOauth.signatureRequest.send(options)\n    .then();\n````\n\n#### Refresh your OAuth token\n\nFrom the HelloSign instance with your app\'s client_id and secret set, you can also use the refresh token you got in the first token call above to fetch a new access token for your use:\n\n````javascript\nhellosign.oauth.refreshToken({refresh_token : \'YOUR_REFRESH_TOKEN\'})\n    .then();\n````\n\n### Team\n\n#### Get your team\'s information\n````javascript\nhellosign.team.get()\n    .then(function(res){\n        console.log(res.team);\n    });\n````\n\n#### Create a team (if you don\'t have one)\n````javascript\nvar team_name = \'Radion 6\'\nhellosign.team.create({name: team_name})\n  .then(function(res){\n    console.log(res.team);\n  });\n````\n\n#### Update team\n````javascript\nvar newName = \'The Mr. T Team\';\nhellosign.team.update({name: newName})\n  .then(function(res){\n    console.log(res.team);\n  });\n````\n\n#### Remove team\n````javascript\nhellosign.team.destroy();\n````\n\n#### Add a team member\n````javascript\nvar memberEmail = \'benedict@cumberbatch.org\';\nhellosign.team.addMember({email_address: memberEmail})\n  .then(function(res){\n    console.log(res.team);\n  });\n````\n\n#### Remove a team member\n````javascript\nvar memberEmail = \'benedictinemonk@cumberbatch.org\';\nhellosign.team.removeMember({email_address: memberEmail})\n    .then(function(res){\n      console.log(res.team);\n    });\n````\n\n### Template\n\n#### List current templates\n````javascript\nhellosign.template.list();\n    .then(function(res){\n        console.log(res.templates);\n    }\n````\n\n#### Get a template by id\n````javascript\nvar template_id = \'7b63c2131099ef7effeb0e980e2c42005fe3405d\';\nhellosign.template.get(template_id)\n    .then(function(res){\n        console.log(res.template);\n    });\n````\n\n#### Add a team member to a template\n````javascript\nvar template_id = \'7b63c2131099ef7effeb0e980e2c42005fe3405d\';\nvar memberEmail = \'robin@batman.com\'\nhellosign.template.addUser(\n        template_id,\n        {\n          email_address: memberEmail\n        }\n    )\n    .then(function(res){\n      console.log(res.template);\n    });\n````\n\n#### Remove a team member from a template\n````javascript\nvar template_id = \'7b63c2131099ef7effeb0e980e2c42005fe3405d\';\nvar memberEmail = \'othersidekick@batman.com\'\nhellosign.template.removeUser(\n        template_id,\n        {\n          email_address: memberEmail\n        }\n    )\n    .then(function(res){\n      console.log(res.template);\n    });\n````\n\n#### Create an embedded template draft\n````javascript\nvar options = {\n    test_mode: 1,\n    files: [\'my/files/nda.pdf\'],\n    title: \'embedded draft test\',\n    subject: \'embedded draft test\',\n    message: \'embedded draft test\',\n    signer_roles: [\n        {\n            name: \'Sherlock\',\n            order: 0\n        },{\n            name: \'Watson\',\n            order: 1\n        }\n    ],\n    cc_roles: [\'commissioner@metropolice.gov.uk\']\n};\n\nvar results = hellosign.template.createEmbeddedDraft(options)\n    .then(function(res){\n        console.log(res.template);\n    });\n````\n\n### Unclaimed Draft\n\n#### Create an unclaimed draft\n````javascript\nhellosign.unclaimedDraft.create({\n        test_mode : 1,\n        files : [\'my/files/nda.pdf\', \'other/files/secret.pdf\']\n        })\n        .then(function(res){\n            console.log(res.unclaimed_draft.claim_url);\n        });\n````\n\n#### Create an embedded unclaimed draft\n````javascript\nvar options = {\n    test_mode : 1,\n    clientId : \'0836272d66a1b53f9822f3aa07aef704\',\n    type : \'request_signature\',\n    subject : \'The NDA we talked about\',\n    requester_email_address : \'jack@hellosign.com\',\n    files : [\'my/secret/lair/nda.pdf\'],\n    is_for_embedded_signing : 1\n};\n\nhellosign.unclaimedDraft.createEmbedded(options)\n    .then(function(res){\n        console.log(res.unclaimed_draft.claim_url);\n    });\n````\n\n#### Create embedded unclaimed draft with template\n````javascript\nvar options = {\n    test_mode: 1,\n    template_id: \'7b63c2131099ef7effeb0e980e2c42005fe3405d\',\n    title: \'embedded draft test\',\n    subject: \'embedded draft test\',\n    message: \'embedded draft test\',\n    signing_redirect_url: \'http://bondstreet.co.uk\',\n    requesting_redirect_url: \'http://met.police.uk\',\n\n    signers: [\n        {\n            name: \'Sherlock\',\n            role: \'Signer\',\n            email_address: \'sherlock@holmesdetective.co.uk\',\n            pin: 3645\n        },{\n            name: \'Watson\',\n            role: \'Assistant\',\n            email_address: \'watson@holmesdetective.co.uk\',\n            pin: 4657\n        }\n    ],\n    requester_email_address: \'mrshudson@landlady.com\',\n    metadata: {\n        clue1: \'pink suitcase\',\n        clue2: \'rache...\'\n    }\n};\n\nhellosign.unclaimedDraft.createEmbeddedWithTemplate(options);\n    .then(function(res){\n        console.log(res.unclaimed_draft.claim_url);\n    });\n````\n\n## Warnings\n\nAny warnings returned from the api will be accessible on the response object returned:\n\n````javascript\nhellosign.account.get()\n\t.then(function(res){\n\t\tconsole.log(res.warnings);\n\t});\n````\n\n## Status codes\n\nOn any response object, you can inspect the `statusCode` and `statusMessage` properties to get HTTP status information.\n\nThis is especially useful for endpoints that don\'t return any JSON information, like `cancel`:\n\n````javascript\nhellosign.signatureRequest.cancel(\'fa5c8a0b0a492d768749333ad6fcc214c111e967\')\n.then(function(response){\n  console.log(response.statusCode);\n  console.log(response.statusMessage);\n});\n````\n\n## Tests\n\nUnit tests can be run simply by executing:\n````sh\nnpm test\n````\n\nYou can run the full test suite (including functional tests) by executing the following commands after you cloned the repo:\nNote that it requires to have a HelloSign account, with two templates (each having a single signer role, titled \'Signer\') and one api app.\n\n**WARNING:** We advise against running these tests against your personal account as they perform destructive actions.\n\n````sh\ncd hellosign-nodejs-sdk\ncp test/testparams.example.js test/testparams.js\n\n# In testparams.js, edit\nvar api_key = \'YOUR API KEY\';\nvar client_id = \'YOUR CLIENT ID\';\nvar client_secret = \'SECRET\';\n\n# Then run the mocha instance from node_modules:\n\nnode_modules/mocha/bin/mocha\n````\n\nMocked functional tests are coming soon. Look inside the repo for a sneak peak.\n\n## Additional notes\n\n### Local callbacks\nWe do not allow app callbacks (event or OAuth) to be set to localhost. However it is still possible to test callbacks against a local server. Tunneling services such as ngrok (http://ngrok.com) can help you set this up.\n\n## License\n\n```\nThe MIT License (MIT)\n\nCopyright (C) 2015 hellosign.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: 'd07974274d80857a726ec02322f2c00716119e5b',
18 silly publish   bugs: { url: 'https://github.com/HelloFax/hellosign-nodejs-sdk/issues' },
18 silly publish   _id: 'hellosign-sdk@1.1.6',
18 silly publish   _shasum: '37dac8dd9f49d3c6cda4db638be921f7536e50c0',
18 silly publish   _from: '.' }
19 silly mapToRegistry name hellosign-sdk
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/hellosign-sdk
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/derek/.npm/hellosign-sdk/1.1.6/package.tgz
25 verbose request uri https://registry.npmjs.org/hellosign-sdk
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 11:19:06
28 verbose request using bearer token for auth
29 verbose request id 981c2b0d5b40b779
30 http request PUT https://registry.npmjs.org/hellosign-sdk
31 http 403 https://registry.npmjs.org/hellosign-sdk
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=300',
32 verbose headers   'content-length': '95',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Thu, 21 Jan 2016 19:19:07 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-lax1422-LAX',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1453403946.853756,VS0,VE549' }
33 verbose request invalidating /Users/derek/.npm/registry.npmjs.org/hellosign-sdk on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 1.1.6." : hellosign-sdk
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:254:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:178:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:344:22)
35 verbose stack     at Request.emit (events.js:110:17)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1239:14)
35 verbose stack     at Request.emit (events.js:129:20)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1187:12)
35 verbose stack     at IncomingMessage.emit (events.js:129:20)
35 verbose stack     at _stream_readable.js:908:16
35 verbose stack     at process._tickCallback (node.js:355:11)
36 verbose statusCode 403
37 verbose pkgid hellosign-sdk
38 verbose cwd /Users/derek/Documents/sdks/hellosign-nodejs-sdk
39 error Darwin 15.2.0
40 error argv "node" "/usr/local/bin/npm" "publish"
41 error node v0.12.0
42 error npm  v2.5.1
43 error code E403
44 error "You cannot publish over the previously published version 1.1.6." : hellosign-sdk
45 error If you need help, you may report this error at:
45 error     <http://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
